### remove all the ocr pages
file.remove(list.files()[str_detect(list.files(), regex("\\.png", ignore_case = TRUE))])
### Save each decision as a .txt file
## decision_repo
if(!dir.exists("data_repo/DGcomp/decision_repo")){
dir.create("data_repo/DGcomp/decision_repo")
}
## write them and save them
map2(DGComp_data$case_id, DGComp_data$decision_txt, function(id, txt) cat(txt,
file = paste0("data_repo/DGcomp/decision_repo", id, ".txt")) )
id <- 1
paste0("data_repo/DGcomp/decision_repo", id, ".txt")
## write them and save them
map2(DGComp_data$case_id, DGComp_data$decision_txt, function(id, txt) cat(txt,
file = paste0("data_repo/DGcomp/decision_repo/", id, ".txt")) )
require(cld3)
### first filtering, get all the decisions written in Germna
DGComp_data <- DGComp_data %>%
mutate(decision_lang = cld3::detect_language(decision_txt))
table(DGComp_data$decision_lang)
str_detect(DGComp_data$decision_txt, regex(retail, ignore_case = TRUE))
str_detect(DGComp_data$decision_txt, regex("retail", ignore_case = TRUE))
DGComp_data$case_id[str_detect(DGComp_data$decision_txt, regex("retail", ignore_case = TRUE))]
DGComp_data$case_id[str_detect(DGComp_data$decision_txt, regex("retail.*bank", ignore_case = TRUE))]
DGComp_data$case_id[str_detect(DGComp_data$decision_txt, regex("retail.*bank.*german(y)?", ignore_case = TRUE))]
DGComp_data$case_id[str_detect(DGComp_data$decision_txt, regex("retail.*bank.*german", ignore_case = TRUE))]
DGComp_data %>% filter(str_detect(decision_txt, regex("germany", ignore_case = TRUE)))
DGComp_data %>% filter(str_detect(decision_txt, regex("germany", ignore_case = TRUE)) & str_detect(decision_txt, regex("retail", ignore_case = TRUE)))
DGComp_data %>% filter(str_detect(decision_txt, regex("germany", ignore_case = TRUE)) & str_detect(decision_txt, regex("retail", ignore_case = TRUE)) & str_detect(decision_txt, regex("bank", ignore_case = TRUE)))
DGComp_data %>% filter(str_detect(decision_txt, regex("germany", ignore_case = TRUE)) & str_detect(decision_txt, regex("retail", ignore_case = TRUE)) & str_detect(decision_txt, regex("bank", ignore_case = TRUE))) %>% View()
DGComp_data %>% filter((str_detect(decision_txt, regex("germany", ignore_case = TRUE)) & str_detect(decision_txt, regex("retail", ignore_case = TRUE)) & str_detect(decision_txt, regex("bank", ignore_case = TRUE))) | decision_lang == "de") %>% View()
DGComp_data %>% filter((str_detect(decision_txt, regex("germany", ignore_case = TRUE)) & str_detect(decision_txt, regex("retail", ignore_case = TRUE)) & str_detect(decision_txt, regex("bank", ignore_case = TRUE))) | decision_lang == "de")
DGComp_filtered <- DGComp_data %>%
filter((str_detect(decision_txt, regex("germany", ignore_case = TRUE)) & str_detect(decision_txt, regex("retail", ignore_case = TRUE)) & str_detect(decision_txt, regex("bank", ignore_case = TRUE))) | decision_lang == "de")
save(DGComp_data,
file = paste0("data_repo/DGcomp/3_", str_extract(Sys.time(), "^.*?(?=\\s)"), "_","dgComp_filteredGermanRetailBank_mergerCases.Rdata"))
write.xlsx(DGComp_data,
file = paste0("data_repo/DGcomp/3_", str_extract(Sys.time(), "^.*?(?=\\s)"), "_","dgComp_filteredGermanRetailBank_mergerCases.xlsx"))
DGComp_filtered <- DGComp_data %>%
filter((str_detect(decision_txt, regex("german", ignore_case = TRUE)) & str_detect(decision_txt, regex("retail", ignore_case = TRUE)) & str_detect(decision_txt, regex("bank", ignore_case = TRUE))) | decision_lang == "de")
## export
save(DGComp_data,
file = paste0("data_repo/DGcomp/3_", str_extract(Sys.time(), "^.*?(?=\\s)"), "_","dgComp_filteredGermanRetailBank_mergerCases.Rdata"))
write.xlsx(DGComp_data,
file = paste0("data_repo/DGcomp/3_", str_extract(Sys.time(), "^.*?(?=\\s)"), "_","dgComp_filteredGermanRetailBank_mergerCases.xlsx"))
DGComp_filtered <- DGComp_data %>%
filter((str_detect(decision_txt, regex("german", ignore_case = TRUE)) & str_detect(decision_txt, regex("retail", ignore_case = TRUE)) & str_detect(decision_txt, regex("bank", ignore_case = TRUE))) | (decision_lang == "de" & str_detect(decision_txt, "no decision") == FALSE))
DGComp_filtered <- DGComp_data %>%
filter((str_detect(decision_txt, regex("german", ignore_case = TRUE)) & str_detect(decision_txt, regex("retail", ignore_case = TRUE)) & str_detect(decision_txt, regex("bank", ignore_case = TRUE))) | (str_detect(decision_txt, "no decision") == FALSE) & decision_lang == "de")
DGComp_filtered <- DGComp_data %>%
filter((str_detect(decision_txt, regex("german", ignore_case = TRUE)) & str_detect(decision_txt, regex("retail", ignore_case = TRUE)) & str_detect(decision_txt, regex("bank", ignore_case = TRUE))) | (str_detect(decision_txt, "no decision") == FALSE & decision_lang == "de"))
DGComp_filtered <- DGComp_data %>%
filter((str_detect(decision_txt, regex("german", ignore_case = TRUE)) & str_detect(decision_txt, regex("retail", ignore_case = TRUE)) & str_detect(decision_txt, regex("bank", ignore_case = TRUE))) | (decision_lang == "de"))
DGComp_filtered <- DGComp_data %>%
filter((str_detect(decision_txt, regex("german", ignore_case = TRUE)) & str_detect(decision_txt, regex("retail", ignore_case = TRUE)) & str_detect(decision_txt, regex("bank", ignore_case = TRUE))) | (str_detect(decision_txt, "no decision") == FALSE & decision_lang == "de"))
## export
save(DGComp_data,
file = paste0("data_repo/DGcomp/3_", str_extract(Sys.time(), "^.*?(?=\\s)"), "_","dgComp_filteredGermanRetailBank_mergerCases.Rdata"))
write.xlsx(DGComp_data,
file = paste0("data_repo/DGcomp/3_", str_extract(Sys.time(), "^.*?(?=\\s)"), "_","dgComp_filteredGermanRetailBank_mergerCases.xlsx"))
save(DGComp_filtered,
file = paste0("data_repo/DGcomp/3_", str_extract(Sys.time(), "^.*?(?=\\s)"), "_","dgComp_filteredGermanRetailBank_mergerCases.Rdata"))
write.xlsx(DGComp_filtered,
file = paste0("data_repo/DGcomp/3_", str_extract(Sys.time(), "^.*?(?=\\s)"), "_","dgComp_filteredGermanRetailBank_mergerCases.xlsx"))
q()
require(tidyverse)
require(rvest)
require(xlsx)
require(pdftools)
DGComp_data %>%
filter((str_detect(decision_txt, regex("german", ignore_case = TRUE)) & str_detect(decision_txt, regex("bank", ignore_case = TRUE))) | (str_detect(decision_txt, "no decision") == FALSE & decision_lang == "de"))
DGComp_filtered <- DGComp_data %>%
filter((str_detect(decision_txt, regex("german", ignore_case = TRUE)) & str_detect(decision_txt, regex("bank", ignore_case = TRUE))) | (str_detect(decision_txt, "no decision") == FALSE & decision_lang == "de"))
save(DGComp_filtered,
file = paste0("data_repo/DGcomp/3_", str_extract(Sys.time(), "^.*?(?=\\s)"), "_","dgComp_filteredGermanRetailBank_mergerCases.Rdata"))
write.xlsx(DGComp_filtered,
file = paste0("data_repo/DGcomp/3_", str_extract(Sys.time(), "^.*?(?=\\s)"), "_","dgComp_filteredGermanRetailBank_mergerCases.xlsx"))
View(cases_table)
coded <- read.xlsx(file = "data_repo/DGcomp/coded.xlsx")
coded <- read.xlsx(file = "data_repo/DGcomp/4_2018-12-30_dgComp_handCodedRelevantMergerCases.xlsx",
sheetName = "Sheet1")
View(coded)
setdiff(names(coded), nmes(DGComp_filtered))
setdiff(names(coded), names(DGComp_filtered))
coded <- read.xlsx(file = "data_repo/DGcomp/4_2018-12-30_dgComp_handCodedRelevantMergerCases.xlsx",
sheetName = "Sheet1") %>%
select(-row_number)
setdiff(names(coded), names(DGComp_filtered))
DGComp_filtered <- mutate(DGComp_filtered, hc_finished = NA_character_;
relevant = NA_character_)
DGComp_filtered <- mutate(DGComp_filtered, hc_finished = NA_character_,
relevant = NA_character_)
left_join(DGComp_filtered, coded)
DGComp_filtered <- mutate(DGComp_filtered, hc_finished = NA,
relevant = NA)
left_join(DGComp_filtered, coded)
left_join(DGComp_filtered, coded) %>%
select(hc_finished, everything())
left_join(DGComp_filtered, coded) %>%
select(hc_finished, everything()) %>%
View()
DGComp_filtered <- DGComp_data %>%
filter((str_detect(decision_txt, regex("german|deutsch", ignore_case = TRUE)) & str_detect(decision_txt, regex("bank", ignore_case = TRUE))) | (str_detect(decision_txt, "no decision") == FALSE & decision_lang == "de"))
DGComp_filtered <- DGComp_data %>%
filter((str_detect(decision_txt, regex("german|deutsch", ignore_case = TRUE)) | (str_detect(decision_txt, "no decision") == FALSE & decision_lang == "de")))
### Second method of filtering, we extract all decisions which mention germany or which are in german.
DGComp_filtered <- DGComp_data %>%
filter((str_detect(decision_txt, regex("german|deutsch", ignore_case = TRUE)) | (str_detect(decision_txt, "no decision") == FALSE & decision_lang == "de")))
## export
save(DGComp_filtered,
file = paste0("data_repo/DGcomp/3_", str_extract(Sys.time(), "^.*?(?=\\s)"), "_","dgComp_filteredGermanRetailBank_mergerCases.Rdata"))
write.xlsx(DGComp_filtered,
file = paste0("data_repo/DGcomp/3_", str_extract(Sys.time(), "^.*?(?=\\s)"), "_","dgComp_filteredGermanRetailBank_mergerCases.xlsx"))
right_join(DGComp_filtered, coded) %>%
select(hc_finished, everything()) %>%
View()
t <- full_join(DGComp_filtered, coded) %>%
select(hc_finished, everything()) %>%
View()
t <- full_join(DGComp_filtered, coded) %>%
select(hc_finished, everything())
?left_join
t <- left_join(DGComp_filtered, coded) %>%
select(hc_finished, everything())
table(t$hc_finished)
table(coded$hc_finished)
t <- left_join(DGComp_filtered, coded) %>%
select(hc_finished, everything())
table(t$hc_finished)
DGComp_filtered <- mutate(DGComp_filtered, hc_finished = NA,
relevant = NA)
t <- left_join(coded, DGComp_filtered)
table(t$hc_finished)
t <- right_join(coded, DGComp_filtered)
table(t$hc_finished)
t <- right_join(DGComp_filtered, coded)
t <- left_join(DGComp_filtered, coded)
table(t$hc_finished)
t <- DGComp_filtered
t$hc_finished <- coded$hc_finished[match(t$case_id, coded$case_id)]
table(t$hc_finished, useNA = "always")
View(t)
t$hc_finished[t$case_id == "M.8553"]
t$hc_finished[t$case_id == "M.875"]
names(t)
t$relevant <- coded$relevant[match(t$case_id, coded$case_id)]
t <- select(t, hc_finished, everything())
write.xlsx(DGComp_filtered,
file = paste0("data_repo/DGcomp/4_", str_extract(Sys.time(), "^.*?(?=\\s)"), "_","dgComp_handcodedRelevantMergerCases.xlsx"))
DGComp_filtered <- t
write.xlsx(DGComp_filtered,
file = paste0("data_repo/DGcomp/4_", str_extract(Sys.time(), "^.*?(?=\\s)"), "_","dgComp_handcodedMergerCases.xlsx"))
q()
require(tidyverse)
require(rvest)
require(xlsx)
require(pdftools)
rm(list=ls())
library(readxl)
dataset <- read_excel(NULL)
View(dataset)
library(readxl)
cases_table <- read_excel("data_repo/germany/2018-12-28_germany_merger_cases.xlsx",
sheet = "Sheet1", col_types = c("blank",
"text", "text", "text", "text", "text",
"text"))
View(cases_table)
bka_data <- cases_table
names(bka_data)
bka_data$case_page[1]
page <- "https://www.bundeskartellamt.de/SharedDocs/Entscheidung/EN/Fallberichte/Fusionskontrolle/2018/B2-106-18.html;jsessionid=2CC9C0862CD088D94CE22E814899CFF9.2_cid371"
page %>%
read_html() %>%
html_node(".FTpdf") %>%
html_attr("href")
page %>%
read_html() %>%
html_node(".FTpdf") %>%
html_attr("href") %>%
paste0("https://www.bundeskartellamt.de/" ,.)
## set the base page
query_url <- "https://www.bundeskartellamt.de/SiteGlobals/Forms/Suche/Entscheidungssuche_Formular.html?nn=3590440&cl2Categories_Format=Entscheidungen&cl2Categories_Arbeitsbereich=Fusionskontrolle&docId=3590288"
query_url %>%
read_html() %>%
html_nodes("#searchResultIndex li:nth-child(3) a , #searchResultIndex li:nth-child(2) a") %>%
html_attr("href") %>%
paste0("https://www.bundeskartellamt.de/", .) %>%
c(query_url, .)
query_url %>%
read_html() %>%
html_nodes(xpath = '//li[following-sibling::li[@class = "forward"]]/a') %>%
html_text()
## set the base page
query_url <- "https://www.bundeskartellamt.de/SiteGlobals/Forms/Suche/Entscheidungssuche_Formular.html?nn=3590440&cl2Categories_Format=Entscheidungen&cl2Categories_Arbeitsbereich=Fusionskontrolle&docId=3590288"
query_url %>%
read_html() %>%
html_nodes(xpath = '//li[following-sibling::li[@class = "forward"]]/a') %>%
html_text()
## set the base page
query_url <- "https://www.bundeskartellamt.de/SiteGlobals/Forms/Suche/Entscheidungssuche_Formular.html?nn=3589936&cl2Categories_Format=Entscheidungen&gts=3598628_list%253Dheader_text_sort%252Basc&cl2Categories_Arbeitsbereich=Fusionskontrolle&resultsPerPage=45&sortOrder=score+desc%2C+dateOfIssue_dt+desc"
query_url %>%
read_html() %>%
html_nodes(xpath = '//li[following-sibling::li[@class = "forward"]]/a') %>%
html_text() %>%
as.numeric()
query_url %>%
read_html() %>%
html_nodes(xpath = '//li[following-sibling::li[@class = "forward"]]/a') %>%
html_text() %>%
as.numeric() %>%
which.max(.) %>%
c(1:.)
query_url %>%
read_html() %>%
html_nodes(xpath = '//li[following-sibling::li[@class = "forward"]]/a') %>%
html_text() %>%
as.numeric() %>%
unique() %>%
which.max(.) %>%
c(1:.)
query_url %>%
read_html() %>%
html_nodes(xpath = '//li[following-sibling::li[@class = "forward"]]/a') %>%
html_text() %>%
as.numeric() %>%
unique()
query_url %>%
read_html() %>%
html_nodes(xpath = '//li[following-sibling::li[@class = "forward"]]/a') %>%
html_text() %>%
as.numeric() %>%
unique() %>%
max(.)
query_url %>%
read_html() %>%
html_nodes(xpath = '//li[following-sibling::li[@class = "forward"]]/a') %>%
html_text() %>%
as.numeric() %>%
unique() %>%
max(.) %>%
c(1:.)
c(1:query_url %>%
read_html() %>%
html_nodes(xpath = '//li[following-sibling::li[@class = "forward"]]/a') %>%
html_text() %>%
as.numeric() %>%
unique() %>%
max(.))
query_url %>%
read_html() %>%
html_nodes(xpath = '//li[following-sibling::li[@class = "forward"]]/a') %>%
html_text() %>%
as.numeric() %>%
max(.) %>%
c(1:.)
query_url %>%
read_html() %>%
html_nodes(xpath = '//li[following-sibling::li[@class = "forward"]]/a') %>%
html_text() %>%
as.numeric() %>%
max(.) %>%
seq_len(.)
query_url %>%
read_html() %>%
html_nodes(xpath = '//li[following-sibling::li[@class = "forward"]]/a') %>%
html_text() %>%
as.numeric() %>%
max(.) %>%
seq_len(.) %>%
paste0("https://www.bundeskartellamt.de/SiteGlobals/Forms/Suche/Entscheidungssuche_Formular.html?nn=3589936&cl2Categories_Format=Entscheidungen&gts=3598628_list%253Dheader_text_sort%252Basc&gtp=3598628_list%253D", .,"&cl2Categories_Arbeitsbereich=Fusionskontrolle&resultsPerPage=45&sortOrder=score+desc%2C+dateOfIssue_dt+desc")
## subpage vector
# page number vector
subpages_url <- query_url %>%
read_html() %>%
html_nodes(xpath = '//li[following-sibling::li[@class = "forward"]]/a') %>%
html_text() %>%
as.numeric() %>%
max(.) %>%
seq_len(.) %>%
paste0("https://www.bundeskartellamt.de/SiteGlobals/Forms/Suche/Entscheidungssuche_Formular.html?nn=3589936&cl2Categories_Format=Entscheidungen&gts=3598628_list%253Dheader_text_sort%252Basc&gtp=3598628_list%253D", .,"&cl2Categories_Arbeitsbereich=Fusionskontrolle&resultsPerPage=45&sortOrder=score+desc%2C+dateOfIssue_dt+desc")
page <- subpages_url[1]
output <- page %>%
read_html() %>%
html_node("#searchResultTable") %>%
html_table() %>%
as_tibble() %>%
mutate(case_page = page %>%
read_html() %>%
html_nodes("td a") %>%
html_attr("href") %>%
paste0("https://www.bundeskartellamt.de/" ,.) %>%
str_trim()) %>%
rename(case_id = Reference, case_summary = "Short subject", date = Date, product_market = "Product markets", decision = "Type of decision")
page %>%
read_html() %>%
html_node("#searchResultTable") %>%
html_table() %>%
as_tibble() %>%
mutate(case_page = page %>%
read_html() %>%
html_nodes("td a") %>%
html_attr("href") %>%
paste0("https://www.bundeskartellamt.de/" ,.) %>%
str_trim())
page %>%
read_html() %>%
html_node("#searchResultTable") %>%
html_table() %>%
as_tibble() %>%
mutate(case_page = page %>%
read_html() %>%
html_nodes("td a") %>%
html_attr("href") %>%
paste0("https://www.bundeskartellamt.de/" ,.) %>%
str_trim()) %>%
set_name(c("case_id", "case_summary", "date", "product_market", "decision", "case_page"))
page %>%
read_html() %>%
html_node("#searchResultTable") %>%
html_table() %>%
as_tibble() %>%
mutate(case_page = page %>%
read_html() %>%
html_nodes("td a") %>%
html_attr("href") %>%
paste0("https://www.bundeskartellamt.de/" ,.) %>%
str_trim()) %>%
set_names(c("case_id", "case_summary", "date", "product_market", "decision", "case_page"))
### extract the cases from the table
output <- page %>%
read_html() %>%
html_node("#searchResultTable") %>%
html_table() %>%
as_tibble() %>%
mutate(case_page = page %>%
read_html() %>%
html_nodes("td a") %>%
html_attr("href") %>%
paste0("https://www.bundeskartellamt.de/" ,.) %>%
str_trim()) %>%
set_names(c("case_id", "case_summary", "date", "product_market", "decision", "case_page"))
map2_chr(output$case_page, output$case_id, function(page, id){
print(paste0("Scraping case: ", id))
decision_url <- try(page %>%
read_html() %>%
html_node(".FTpdf") %>%
html_attr("href") %>%
paste0("https://www.bundeskartellamt.de/" ,.), silent = TRUE)
return(decision_url)
})
### scrape the case table
cases_table <- map_df(subpages_url, function(page){
### extract the cases from the table
output <- page %>%
read_html() %>%
html_node("#searchResultTable") %>%
html_table() %>%
as_tibble() %>%
mutate(case_page = page %>%
read_html() %>%
html_nodes("td a") %>%
html_attr("href") %>%
paste0("https://www.bundeskartellamt.de/" ,.) %>%
str_trim()) %>%
set_names(c("case_id", "case_summary", "date", "product_market", "decision", "case_page"))
### go to each case page and extract the decision text url
output$decision_url <- map2_chr(output$case_page, output$case_id, function(page, id){
print(paste0("Scraping case: ", id))
decision_url <- try(page %>%
read_html() %>%
html_node(".FTpdf") %>%
html_attr("href") %>%
paste0("https://www.bundeskartellamt.de/" ,.), silent = TRUE)
return(decision_url)
Sys.sleep(runif(2,1,3))
})
return(output)
})
### scrape the case table
cases_table <- map_df(subpages_url, function(page){
### extract the cases from the table
output <- page %>%
read_html() %>%
html_node("#searchResultTable") %>%
html_table() %>%
as_tibble() %>%
mutate(case_page = page %>%
read_html() %>%
html_nodes("td a") %>%
html_attr("href") %>%
paste0("https://www.bundeskartellamt.de/" ,.) %>%
str_trim()) %>%
set_names(c("case_id", "case_summary", "date", "product_market", "decision", "case_page"))
### go to each case page and extract the decision text url
output$decision_url <- map2_chr(output$case_page, output$case_id, function(page, id){
print(paste0("Scraping case: ", id))
decision_url <- try(page %>%
read_html() %>%
html_node(".FTpdf") %>%
html_attr("href") %>%
paste0("https://www.bundeskartellamt.de/" ,.), silent = TRUE)
if(class(decision_url) == "try-error"){
decision_url <- NA_character_
}
return(decision_url)
Sys.sleep(runif(2,1,3))
})
return(output)
})
View(cases_table)
sample(cases_table$decision_url, 20)
str_replace(cases_table$decision_url, "\\/\\/SharedDocs", "/SharedDocs")
cases_table$decision_url <- str_replace(cases_table$decision_url, "\\/\\/SharedDocs", "/SharedDocs")
save(cases_table,
file = paste0("data_repo/germany/1_", str_extract(Sys.time(), "^.*?(?=\\s)"), "_","germany_merger_cases.RData"))
write.xlsx(cases_table,
file = paste0("data_repo/germany/1_", str_extract(Sys.time(), "^.*?(?=\\s)"), "_","germany_merger_cases.xlsx"))
bka_data <- cases_table
View(cases_table)
bka_data$decision_txt <- map2_chr(bka_data$decision_url, bka_data$case_id, function(dec_pdf, id){
print(paste0("parsing case: ", id))
### nto a website, missing the url
if(!is.na(dec_pdf) & str_detect(dec_pdf, "\\.pdf")){
## parse it
parsed_txt <- try(pdf_text(dec_pdf) %>%
paste(., collapse = "\r\n"), silent = TRUE)
# if couldn't parse it, try ocr
if(class(parsed_txt) == "try-error"){
parsed_txt <- try(tesseract::ocr(dec_pdf) %>%
paste(., collapse = "\r\n"), silent = TRUE)
}
# if yet again it fails, assign NA
if(class(parsed_txt) == "try-error"){
parsed_txt <- NA_character_
}
} else {
## no decision
parsed_txt <- "no decision text"
}
## print str for double checking
str(parsed_txt, nchar.max = 1000)
## rest time for the server
Sys.sleep(runif(2,1,3))
return(parsed_txt)
})
bka_data <- rename(bka_data, parties = case_summary)
### remove all the ocr pages
file.remove(list.files()[str_detect(list.files(), regex("\\.png", ignore_case = TRUE))])
### export it
save(DGComp_data,
file = paste0("data_repo/germany/2_", str_extract(Sys.time(), "^.*?(?=\\s)"), "_","germany_merger_cases.Rdata"))
write.xlsx(DGComp_data,
file = paste0("data_repo/germany/2_", str_extract(Sys.time(), "^.*?(?=\\s)"), "_","germany_merger_cases.xlsx"))
### export it
save(bka_data,
file = paste0("data_repo/germany/2_", str_extract(Sys.time(), "^.*?(?=\\s)"), "_","germany_merger_cases.Rdata"))
write.xlsx(Dbka_data,
file = paste0("data_repo/germany/2_", str_extract(Sys.time(), "^.*?(?=\\s)"), "_","germany_merger_cases.xlsx"))
write.xlsx(bka_data,
file = paste0("data_repo/germany/2_", str_extract(Sys.time(), "^.*?(?=\\s)"), "_","germany_merger_cases.xlsx"))
### Save each decision as a .txt file
## decision_repo
if(!dir.exists("data_repo/germany/decision_repo")){
dir.create("data_repo/germany/decision_repo")
}
## write them and save them
map2(DGComp_data$case_id, DGComp_data$decision_txt, function(id, txt) cat(txt,
file = paste0("data_repo/germany/decision_repo/", id, ".txt")))
## write them and save them
map2(bka_data$case_id, bka_data$decision_txt, function(id, txt) cat(txt,
file = paste0("data_repo/germany/decision_repo/", id, ".txt")))
names(bka_data)
## write them and save them
map2(bka_data$case_id, bka_data$decision_txt, function(id, txt) cat(txt, file = paste0("data_repo/germany/decision_repo/", id, ".txt")))
View(bka_data)
cat(txt, file = paste0("data_repo/germany/decision_repo/", id, ".txt"))
## write them and save them
map2(bka_data$case_id, bka_data$decision_txt, function(id, txt){
print(paste0("parsing case: ", id))
cat(txt, file = paste0("data_repo/germany/decision_repo/", id, ".txt"))
})
View(cases_table)
View(bka_data)
## write them and save them
map2(bka_data$case_id, bka_data$decision_txt, function(id, txt){
print(paste0("parsing case: ", id))
cat(txt, file = paste0("data_repo/germany/decision_repo/", str_replace_all(id, "[[:punct:]]", "_"), ".txt"))
})
## write them and save them
map2(bka_data$case_id, bka_data$decision_txt, function(id, txt){
print(paste0("parsing case: ", id))
cat(txt, file = paste0("data_repo/germany/decision_repo/", str_replace_all(id, "\\/", "_"), ".txt"))
})
rm(cases_table)
rm(output)
q()
require(openxlsx)
?write.xlsx
write.xlsx(bka_data,
file = paste0("data_repo/germany/2_", str_extract(Sys.time(), "^.*?(?=\\s)"), "_","germany_merger_cases.xlsx"))
## Load the relevant packages
require(tidyverse)
write.xlsx(bka_data,
file = paste0("data_repo/germany/2_", str_extract(Sys.time(), "^.*?(?=\\s)"), "_","germany_merger_cases.xlsx"))
require(xlsx)
xlsx::write.xlsx(bka_data,
file = paste0("data_repo/germany/2_", str_extract(Sys.time(), "^.*?(?=\\s)"), "_","germany_merger_cases.xlsx"))
write.csv(bka_data,
file = paste0("data_repo/germany/2_", str_extract(Sys.time(), "^.*?(?=\\s)"), "_","germany_merger_cases.csv"))
write.xlsx(bka_data,
file = paste0("data_repo/germany/2_", str_extract(Sys.time(), "^.*?(?=\\s)"), "_","germany_merger_cases.xlsx"))
q()
